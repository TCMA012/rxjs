https://codechips.me/rxjs-beginner-learning-resources/

Brecht Billiet
https://blog.brecht.io/thinking-reactively-in-angular-and-rxjs/

http://blog.brecht.io/components-demystified/#smart-vs-dumb-components

https://github.com/brechtbilliet/reactive-calendar
Angular CLI version 1.0.1

https://blog.brecht.io/rxjs-best-practices-in-angular/

https://github.com/brechtbilliet/ngxReactiveToolkit
https://www.npmjs.com/package/ngx-reactivetoolkit
takeUntilDestroy operator - Netanel Basal

async as else


https://blog.brecht.io/the-sip-principle/
The SIP principle stands for the following:
S: Source streams
I: Intermediate streams
P: Presentation streams



https://medium.com/better-programming/getting-started-with-rxjs-1b6260dd184b

https://rangle.io/blog/rxjs-where-is-the-if-else-operator/



https://luukgruijs.medium.com/understanding-hot-vs-cold-observables-62d04cf92e03



https://ncjamieson.com/understanding-publish-and-share/
An observable is cold if the producer of its notifications is created whenever an observer subscribes to the observable. For example, a timer observable is cold; each time a subscription is made, a new timer is created.
An observable is hot if the producer of its notifications is not created each time an observer subscribes to the observable. For example, an observable created using fromEvent is hot; the element that produces the events exists in the DOM — it’s not created when the observer is subscribed.



https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339
https://medium.com/@benlesh/on-the-subject-of-subjects-in-rxjs-2b08b7198b93



https://itnext.io/understanding-rxjs-subjects-386605ad2bdb

https://levelup.gitconnected.com/rxjs-subjects-explained-with-examples-78ae7b9edfc

https://ncjamieson.com/how-to-use-refcount/



https://blog.angular-university.io/tag/rxjs/

https://blog.angular-university.io/rxjs-higher-order-mapping/
Observable concatenation is about Observable completion
Using Observable Concatenation to implement sequential saves
with a concat() operation, concatenating the multiple httpPost$ Observables together to ensure that an HTTP save is not made before the previous ongoing save completes first


run things in parallel, without waiting for the previous inner Observable to complete.
the merge Observable combination strategy


Observable switching is about ensuring that the unsubscription logic of unused Observables gets triggered, so that resources can be released
The moment that a diagonal line forks from the higher-order Observable top line, is the moment when a value Observable was emitted and subscribed to by switch.
search Typeahead


Exhaust
ignore new values in the source Observable until the previous value is completely processed



do things in sequence while waiting for completion, concatMap
do things in parallel, mergeMap
cancellation logic, switchMap
ignoring new Observables while the current one is still ongoing, exhaustMap

https://github.com/angular-university/rxjs-course/tree/1-operators-finished?ref=blog.angular-university.io



https://blog.angular-university.io/rxjs-switchmap-operator/
The result observable has switched from emitting 
the values of the first inner observable, to emitting 
the values of the newly created inner observable



https://netbasal.com/getting-to-know-the-defer-observable-in-rxjs-a16f092d8c09



https://ultimatecourses.com/blog/rxjs-forkjoin-combine-observables
the forkJoin operator will preserve the order of inner observables regardless of when they complete.
forkJoin only completes when all inner observables complete.
only the last emitted value from inner observables will be output
all inner observables are run in parallel.






https://medium.com/litslink/rxjs-transformation-operators-in-examples-part-1-9c9fb7b4e705

https://medium.com/litslink/rxjs-transformation-operators-in-examples-part-2-9d0f09bdbe6d



https://angularexperts.io/blog/the-most-impactful-rx-js-best-practice-of-all-time



https://www.thisdot.co/resources/1HourtoLearnRxJS/



https://github.com/LinkedInLearning/learning-rxjs-4401995
https://www.linkedin.com/learning/learning-rxjs-22802739?dApp=59033956&leis=LAA



https://dev.to/salimchemes/angular-app-to-understand-rxjs-operators-189l
https://github.com/salimchemes/rxjs-operators
https://awesome-sammet-a68543.netlify.app/
https://www.learnrxjs.io/learn-rxjs/operators
https://www.npmjs.com/package/ngx-highlightjs
https://www.npmjs.com/package/ngx-json-viewer




https://www.learnrxjs.io/
https://www.learnrxjs.io/learn-rxjs/concepts/rxjs-primer
https://www.learnrxjs.io/learn-rxjs/recipes



https://thinkrx.io/



https://medium.com/ngconf/rxjs-for-beginner-angular-developers-introduction-2d26ffa364af
Routing emits parameters via a paramMap Observable
FormControl emits a value via a valueChanges Observable
HttpClient emits the response via an Observable
Output/event-emitters generate Observables
Angular has a built-in Async pipe for automatically unwrapping observable-contained values in templates.

https://medium.com/ngconf/rxjs-for-beginner-angular-developers-part-2-fundamentals-535b939378d5





https://blog.devgenius.io/learn-rxjs-in-an-easy-way-8008f291ef8f



https://dev.to/benlesh/a-simple-explanation-of-functional-pipe-in-javascript-2hbj